/**
 * This class represents a User in the system.
 * Users are entities with various attributes such as email, name, and role.
 */
package com.backend.server.controller;

import com.fasterxml.jackson.annotation.JsonInclude;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

import java.util.ArrayList;
import java.util.List;

/**
 * The User class is a data model that represents a user in the application.
 * It contains various attributes such as email, first name, last name, and role.
 * The class is annotated with Lombok annotations for generating boilerplate code.
 */
@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder

/**
 * The Document annotation is used to indicate that instances of this class
 * will be mapped to a MongoDB collection named "user".
 */
@Document(collection = "user")

/**
 * The User class is serialized to JSON, and this annotation is used to
 * specify that properties with null values will be excluded from the JSON output.
 * Currently commented out, but can be uncommented if required.
 */
//@JsonInclude(JsonInclude.Include.NON_NULL)
public class User {

    /**
     * The email of the user.
     */
    private String email;

    /**
     * The first name of the user.
     */
    private String firstName;

    /**
     * The last name of the user.
     */
    private String lastName;

    /**
     * The mobile number of the user.
     * This attribute is annotated with @Id to indicate that it is the primary identifier for the user.
     */
    @Id
    private String mobileNumber;

    /**
     * The password of the user.
     */
    private String password;

    /**
     * The address of the user.
     */
    private String Address;

    /**
     * The role of the user in the application.
     */
    private String role;

    /**
     * Default constructor for the User class.
     */
    public User() {
    }

    /**
     * Parameterized constructor for the User class.
     *
     * @param email       The email of the user.
     * @param firstName   The first name of the user.
     * @param lastName    The last name of the user.
     * @param mobileNumber The mobile number of the user.
     * @param password    The password of the user.
     * @param address     The address of the user.
     * @param role        The role of the user in the application.
     */
    public User(String email, String firstName, String lastName, String mobileNumber, String password, String address, String role) {
        this.email = email;
        this.firstName = firstName;
        this.lastName = lastName;
        this.mobileNumber = mobileNumber;
        this.password = password;
        this.Address = address;
        this.role = role;
    }

    // Getters and setters for the attributes are automatically generated by Lombok.
    // If additional logic is needed for any attribute, custom getters/setters can be added here.

    /**
     * Overrides the default toString() method to provide a custom representation of the User object.
     *
     * @return A string representation of the User object.
     */
    @Override
    public String toString() {
        return "User{" +
                "email='" + email + '\'' +
                ", firstName='" + firstName + '\'' +
                ", lastName='" + lastName + '\'' +
                ", mobileNumber='" + mobileNumber + '\'' +
                ", password='" + password + '\'' +
                ", Address='" + Address + '\'' +
                ", role='" + role + '\'' +
                '}';
    }
}
